plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


//jar {
//    manifest {
//        attributes "Main-Class": "com.ASD"
//    }
//
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}



dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'com.google.zxing:javase:3.4.1'
    implementation 'org.apache.poi:poi-ooxml-full:5.0.0'
    implementation 'org.apache.poi:poi-ooxml:5.0.0'
    implementation 'com.github.sarxos:webcam-capture:0.3.12'
    implementation 'com.google.zxing:zxing-parent:3.4.1'
}

test {
    useJUnitPlatform()
}

//task fatJar(type: Jar) {
//    manifest.from jar.manifest
//    classifier = 'all'
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    } {
//        exclude "META-INF/*.SF"
//        exclude "META-INF/*.DSA"
//        exclude "META-INF/*.RSA"
//    }
//    with jar
//}
//
//task fatJar(type: Jar) {
//    manifest {
//        attributes 'Implementation-Title': 'Gradle Jar File',
//                'Implementation-Version': version,
//                'Main-Class': 'path.classname'
//    }
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

//task fatJar(type: Jar){
//        duplicatesStrategy = DuplicatesStrategy.INHERIT
//
//        manifest { attributes 'Main-Class': 'com.java.MainGUI' }
//
//        from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//                {
//                    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
//                }
//
//    with jar
//}

jar {
    archiveName = 'javaTest.jar'

    manifest {attributes 'Main-Class': 'com.peejaygal.home'}

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } }
            {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
            }
}